/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 16.04.2 ] */

/* [wxMaxima: comment start ]
   Ejercicios del Tema 3 de Métodos Numéricos II
Pablo Baeyens Fernández y José Manuel Muñoz Fuentes

Esta línea debe ejecutarse antes que las siguientes:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("MétodosT3.mac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Ejercicio 1 (ejercicio 1 del 10/5)
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
[a, b]: [0, 2]$
[n, y0]: [10, 0.5]$
l(t,y):=y-t^2+1$
y(t):=(t+1)^2-0.5*%e^t$
v:pvi_euler(a,b,n,y0,l);
makelist([float(y(a + i*(b-a)/n)), v[i][2]], i, 1, n+1);
plot2d([float(y(x)), [discrete, v]], [x,a,b])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Ejercicio 2 (ejercicio 2 del 10/5)
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
[a, b]: [0, 1]$
[n, y0]: [10, 0]$
l(t,y):=sqrt(y)$
y(t):=t^2/4$
u1:pvi_euler(a,b,n,y0,l);
u2:pvi_euler(a,b,n,10^(-5),l);
makelist([float(y(a + i*(b-a)/n)), u1[i][2], u2[i][2]], i, 1, n+1);
plot2d([float(y(x)), [discrete, u1], [discrete, u2]], [x,a,b])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Ejercicio 3 (ejercicio 1 del 17/5)
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
a) En primer lugar calculamos las aproximaciones con cada método:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[a,b]: [1,2]$
[n,y0]: [10,float(-1/log(2))]$
l(t,y):=y^2/(1+t)$
y(t):=-1/log(t+1)$

ap[0]:pvi_taylor(a,b,n,y0,l,1)$
ap[1]:pvi_taylor(a,b,n,y0,l,4)$
ap[2]:pvi_euler_mejorado(a,b,n,y0,l)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
A continuación vemos los errores: las columnas se corresponden
con los errores de los métodos de Taylor de orden 2, Taylor de orden 4 
y Euler mejorado respectivamente. Como vemos los errores del método de 
Taylor de orden 4 son órdenes de magnitud menores que el resto.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ex:makelist(float(y(a+j*(b-a)/n)),j,0,n)$
transpose(apply(matrix,
    makelist(makelist(ap[i][j][2]-ex[j],j,1,n+1),i,0,2)
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
b) Método del punto medio. Calculamos aproximaciones de u1 con dos métodos distintos
y a continuación calculamos las aproximaciones con el método del punto medio:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[a,b]: [1,2]$
[n,u0]: [10,float(-1/log(2))]$
l(t,y):=y^2/(1+t)$
y(t):=-1/log(t+1)$

u1_euler: u0 + (b-a)/n*l(a,u0)$
u1_mejorado: u0 + (b-a)/n*l(a+(b-a)/(2*n),u0+ (b-a)/(2*n)*l(a,u0))$
ap[0]:pvi_punto_medio(a,b,n,u0,u1_euler,l)$
ap[1]:pvi_punto_medio(a,b,n,u0,u1_mejorado,l)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Los errores quedan:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ex:makelist(float(y(a+j*(b-a)/n)),j,0,n)$
transpose(apply(matrix,
    makelist(makelist(ap[i][j][2]-ex[j],j,1,n+1),i,0,1)
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Como vemos las aproximaciones tomando como u1 el valor obtenido con
el método de Euler mejorado son mejores ya que este método tiene orden 2
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Ejercicio 4 (ejercicio 2 del 17/5)
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
a) El error de truncatura local del método puede obtenerse:

1/h(yj - u*j) = 1/h(-h^3/12*y''(xi)) = M*h^2

donde hemos utilizado el error del método del trapecio.
Como vemos el método es de orden 2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[a,b]: [0,2]$
[n,u0]: [10, 3]$
l(t,y):=y-t^2$
y(t):=%e^t+t^2+2*t+2$

u_cn[1]: pvi_crank_nicholson(a,b,n,u0,l)$
u_cn[2]: pvi_euler_mejorado(a,b,n,u0,l)$
ex:makelist(float(y(a+j*(b-a)/n)),j,0,n)$
transpose(apply(matrix,
    makelist(makelist(u_cn[i][j][2]-ex[j],j,1,n+1),i,1,2)
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Ejercicio 9
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
[a,b]: [1,2]$
[n,u0]: [10,float(-1/log(2))]$
l(t,y):=y^2/(1+t)$
y(t):=-1/log(t+1)$

u_solucion[1]: pvi_heun(a,b,n,u0,l)$
u_solucion[2]: pvi_runge_kutta_4(a,b,n,u0,l)$
u_solucion[3]: pvi_taylor(a,b,n,u0,l,2)$
u_solucion[4]: pvi_taylor(a,b,n,u0,l,4)$
ex:makelist(float(y(a+j*(b-a)/n)),j,0,n)$
transpose(apply(matrix,
    makelist(makelist(u_solucion[i][j][2]-ex[j],j,1,n+1),i,1,4)
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Ejercicio 12
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
TODO: Adams_Bashforth no está programado en MetodosT3.mac
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[a,b]: [0,1]$
[n,u0]: [10,1]$
l(t,y):=(2-2*t*y)/(1+t^2)$
y(t):=(2*t+1)/(t^2+2)$

u_ab[1]: adams_bashforth(a,b,n,u0,pvi_euler,l)$
u_ab[2]: adams_bashforth(a,b,n,u0,pvi_euler_mejorado,l)$
u_ab[3]: adams_bashforth(a,b,n,u0,pvi_runge_kutta_4,l)$
ex:makelist(float(y(a+j*(b-a)/n)),j,0,n)$
transpose(apply(matrix,
    makelist(makelist(u_ab[i][j][2]-ex[j],j,1,n+1),i,1,3)
));

/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
